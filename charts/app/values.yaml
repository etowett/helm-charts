# Default values for app.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: nginx
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext:
  {}
  # fsGroup: 2000

securityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

commands: []

args: []

port: {}

service:
  type: ClusterIP
  name: http
  port: 80

extraPorts: {}

ingress:
  enabled: false
  className: ""
  annotations:
    {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

pdb:
  enabled: false
  minAvailable: 1

pvc:
  created: false

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

# Environment variables to be stored in a configmap
env: {}
# Example:
# env:
#   DATABASE_URL: "postgresql://user:pass@host:5432/db"
#   REDIS_URL: "redis://redis:6379"
#   LOG_LEVEL: "INFO"

# Secret environment variables (these remain as secrets)
secretEnv: {}
# Example:
# secretEnv:
#   DATABASE_PASSWORD:
#     name: "db-secret"
#     key: "password"
#   API_KEY:
#     name: "api-secret"
#     key: "key"

# Direct secret values (consolidated into a single Kubernetes Secret)
secrets: {}
# Example:
# secrets:
#   SECRET_KEY: "replace-me"
#   DATABASE_PASSWORD: "my-secure-password"
#   API_KEY: "your-api-key-here"
#   JWT_SECRET: "your-jwt-secret"

# Hybrid configmap (combines env vars with secret references)
# WARNING: This approach is less secure than using secrets directly
hybridConfig:
  enabled: false
  secretRefs: {}
  # Example:
  # secretRefs:
  #   DATABASE_PASSWORD: "{{ .Values.externalSecrets.dbPassword }}"
  #   API_KEY: "{{ .Values.externalSecrets.apiKey }}"

externalSecrets: []

initContainer:
  enabled: false
  resources: {}

hookVolumeMounts: {}

hookVolumes: {}
